buildscript {
	repositories{
        mavenLocal()
        mavenCentral()
        maven {
            url repositoryMavenCentral
        }
	}
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.3.1.RELEASE")
    }
}


apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.springframework.boot"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
//    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

repositories {
    maven {
        url repositoryMavenCentral
    }
}

dependencyManagement {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
    imports {
        mavenBom "io.anyway.bigbang.framework:framework-dependency-management:1.0.0-SNAPSHOT"
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    exclude group: "org.springframework.cloud",module: "spring-cloud-starter-netflix-ribbon"
    exclude group: "org.springframework.boot", module: "spring-boot-starter-web"
}

dependencies {
    compile("io.anyway.bigbang:framework-microservice-bootstrap:1.0.0-SNAPSHOT")
    compile("io.anyway.bigbang:framework-microservice-header:1.0.0-SNAPSHOT")
    compile("io.anyway.bigbang:framework-microservice-metrics:1.0.0-SNAPSHOT")
    compile("io.anyway.bigbang:framework-microservice-security:1.0.0-SNAPSHOT")
    compile("io.anyway.bigbang:framework-microservice-useragent:1.0.0-SNAPSHOT")
    compile("io.anyway.bigbang:framework-microservice-apm:1.0.0-SNAPSHOT")
    compile("io.anyway.bigbang:framework-microservice-gray:1.0.0-SNAPSHOT")
    compile("org.springframework.cloud:spring-cloud-starter-gateway")
    compile("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config")
//    compile("com.alibaba.cloud:spring-cloud-starter-alibaba-sentinel")
//    compile("com.alibaba.cloud:spring-cloud-alibaba-sentinel-gateway")
//    compile("org.springframework.cloud:spring-cloud-loadbalancer")
    annotationProcessor("org.projectlombok:lombok")
    compileOnly("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    testCompileOnly("org.projectlombok:lombok")
}



